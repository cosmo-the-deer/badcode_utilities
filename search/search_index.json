{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home Page","text":"<p>A small Python utility library by cosmo-the-deer, providing simple helpers for string-to-int conversion, yes/no prompts, and project info display.</p>"},{"location":"#badcode-links","title":"badcode links:","text":"<ul> <li>Github: Github repo</li> <li>Docs: Docs</li> <li>Pypi: Package</li> </ul>"},{"location":"#license","title":"License","text":"<p>MIT License \u00a9 2025 cosmo-the-deer</p>"},{"location":"#socials","title":"Socials","text":"<ul> <li>Discord: cosmothedeer12</li> <li>YouTube: @cosmo-the-deer</li> <li>Itch.io: cosmothedeer</li> </ul>"},{"location":"functions/","title":"Functions","text":""},{"location":"functions/#can_str_be_intstring","title":"can_str_be_int(string)","text":"<p>Description: Checks if the given string can be converted to an integer.</p> <p>Parameters: - <code>string</code> (str): The string to check.</p> <p>Returns: - <code>True</code> if the string can be converted to an integer, otherwise <code>False</code>.</p> <p>Example: <pre><code>can_str_be_int(\"123\")    # True\ncan_str_be_int(\"abc\")    # False\n</code></pre></p>"},{"location":"functions/#str_to_int_or_nonestring","title":"str_to_int_or_none(string)","text":"<p>Description: Converts the given string to an integer if possible, otherwise returns <code>None</code>.</p> <p>Parameters: - <code>string</code> (str): The string to convert.</p> <p>Returns: - <code>int</code> if conversion is possible, otherwise <code>None</code>.</p> <p>Example: <pre><code>str_to_int_or_none(\"42\")     # 42\nstr_to_int_or_none(\"hello\")  # None\n</code></pre></p>"},{"location":"functions/#get_yn_booltext","title":"get_yn_bool(text)","text":"<p>Description: Prompts the user for a yes/no input (<code>y</code> or <code>n</code>). Returns <code>True</code> for yes, <code>False</code> for no.</p> <p>Parameters: - <code>text</code> (str): The prompt to display.</p> <p>Returns: - <code>True</code> if user inputs <code>y</code>, <code>False</code> if user inputs <code>n</code>.</p> <p>Example: <pre><code>answer = get_yn_bool(\"Continue? (y/n): \")\n# User enters 'y' -&gt; answer is True\n# User enters 'n' -&gt; answer is False\n</code></pre></p>"},{"location":"functions/#get_yn_strtext","title":"get_yn_str(text)","text":"<p>Description: Prompts the user for a yes/no input (<code>y</code> or <code>n</code>). Returns the string entered.</p> <p>Parameters: - <code>text</code> (str): The prompt to display.</p> <p>Returns: - <code>'y'</code> or <code>'n'</code> as entered by the user.</p> <p>Example: <pre><code>answer = get_yn_str(\"Continue? (y/n): \")\n# User enters 'y' -&gt; answer is 'y'\n# User enters 'n' -&gt; answer is 'n'\n</code></pre></p>"},{"location":"functions/#print_info","title":"print_info()","text":"<p>Description: Prints project and contact information to the console.</p> <p>Parameters: - None</p> <p>Returns: - None</p> <p>Example: <pre><code>print_info()\n# Output:\n#     #-------------------------------------#\n#     made by cosmo-the-deer 2025 mit license\n#     ...\n</code></pre></p>"},{"location":"functions/#generate_keylength10-characterscharacters_standard","title":"generate_key(length=10, characters=characters_standard)","text":"<p>Description: Generates a random key of specified length using the provided set of characters.</p> <p>Parameters: - <code>length</code> (int, optional): Length of the key (default is 10). - <code>characters</code> (list, optional): List of characters to use (default is <code>characters_standard</code>).</p> <p>Returns: - <code>str</code>: The generated key.</p> <p>Example: <pre><code>generate_key()           # e.g., 'a8F3kLm2Qz'\ngenerate_key(5)          # e.g., 'X9p2B'\n</code></pre></p>"},{"location":"functions/#is_string_badstring","title":"is_string_bad(string)","text":"<p>Description: Checks if the given string contains any words from the bad words list.</p> <p>Parameters: - <code>string</code> (str): The string to check.</p> <p>Returns: - <code>True</code> if any bad word is found, otherwise <code>False</code>.</p> <p>Example: <pre><code>is_string_bad(\"hello world\")        # False\nis_string_bad(\"some badword here\")  # True (if 'badword' is in badwords.txt)\n</code></pre></p>"},{"location":"functions/#filter_stringstring-replacement_charator-wordsbad_words","title":"filter_string(string, replacement_charator=\"\", words=bad_words)","text":"<p>Description: Replaces each bad word in the string with a replacement character repeated to match the word's length.</p> <p>Parameters: - <code>string</code> (str): The string to filter. - <code>replacement_charator</code> (str, optional): The character to use for replacement (e.g., '*'). - <code>words</code> (list, optional): List of words to filter (default is <code>bad_words</code>).</p> <p>Returns: - <code>str</code>: The filtered string with bad words replaced.</p> <p>Example: <pre><code>filter_string(\"this is shit\", \"*\")  # 'this is ****'\nfilter_string(\"badword here\", \"#\")   # '####### here' (if 'badword' is in bad_words)\n</code></pre></p>"}]}